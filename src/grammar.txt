// This file is not actually used to generate the grammar.
// It is merely used for formally writing it down and making it easier for me to remember it as a whole.
// Currently based on this grammar: https://github.com/davidcallanan/py-myopl-code/blob/master/ep14/grammar.txt
statements = NEWLINE* statement (NEWLINE+ statement)* NEWLINE*
statement = keyword:return expr?
            | keyword:continue
            | keyword:break
            | assignment
            | identifier operator+= expr
            | identifier operator-= expr
            | identifier operator*= expr
            | identifier operator/= expr
            | identifier operator<<= expr
            | identifier operator>>= expr
            | identifier operator&= expr
            | identifier operator|= expr
            | identifier operator^= expr
            | identifier operator~= expr
            | expr

assignment = (identifier operator= assignment) | expr

expr = comp-expr ((keyword:and | keyword:or) comp-expr))*

comp-expr = keyword:not comp-expr
            |   arith-expr (operator== | operator!= | operator> | operator< | operator>= | operator<=) arith-expr))*

arith-expr = term ((operator+ | operator- | operator| | operator& | operator^ | operator~) term)*

term = factor ((operator* | operator/ | operator>> | operator<<) factor)*

factor = (operator+ | operator- | operator~) factor
        | call

call = atom ( operator:LPAREN (expr (operator:COMMA expr)*)? operator:RPAREN )?
atom = literal:int | literal:string | identifier |
        (operator:LPAREN expr operator:RPAREN )
        | if-expr
        | func-def


if-expr = keyword:if expr operator:
